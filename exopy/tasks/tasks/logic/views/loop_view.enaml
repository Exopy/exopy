# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2023 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""View for the LoopTask.

"""
from enaml.core.api import Include
from enaml.layout.api import hbox, align, spacer, vbox, grid, factory
from enaml.widgets.api import (PushButton, Container, Label, Field,
                                GroupBox, CheckBox, ObjectCombo)

from .....utils.widgets.qt_completers import QtLineCompleter
from ...string_evaluation import EVALUATER_TOOLTIP
from ...base_views import ComplexTaskView


def format_name(interface_id):
    """Helper funtion formatting interfaces name for object combo widget.

    """
    aux = interface_id.split('.')[-1]
    if aux.endswith('LoopInterface'):
        aux = aux[:-13]
    return aux


def make_view(root, task):
    """Create the view for the task embedded in the loop and set the in_loop
    flag if pertinent.

    """
    view = root.view_for(task.task)
    try:
        view.in_loop = True
    except AttributeError:
        pass

    return [view]


enamldef LoopView(ComplexTaskView): view:
    """View for the LoopTask.

    This view handles the insertion of the selected interface views.

    """

    layout_constraints => ():
        bottom_widgets = (list(embedded_task.objects) + [editor])
        if self.find('interface_include').objects:
            i_views = view.find('interface_include').objects
            i_len = len(i_views)
            if getattr(i_views[0], 'inline', False):
                labels = [i_lab, t_lab] + i_views[::2]
                vals = [i_select, t_val] + i_views[1::2]
                return [vbox(grid(labels, vals), *bottom_widgets)]

            else:
                c_1 = hbox(i_lab, i_select, t_lab, t_val, spacer)
                return [vbox(c_1, *(list(interface.objects) + bottom_widgets)),
                        align('v_center', i_lab, i_select),
                        align('v_center', i_select, t_lab),
                        align('v_center', t_lab, t_val)]

        else:
            c_1 = hbox(i_lab, i_select, t_lab, t_val, spacer)
            return [vbox(c_1, *bottom_widgets)]

    initialized ::
        t = self.task
        i_include = view.find('interface_include')

        if not t.interface:
            t.interface = i_select.interfaces[i_select.items[0]].cls(task=task)

        i_include.objects = root.view_for(t.interface)

    Label: i_lab:
        text = 'Interface'
    ObjectCombo: i_select:
        attr interfaces = root.get_interfaces_for(task)
        items << sorted(interfaces)
        to_string = format_name
        selected << (task.interface.interface_id.split(':')[-1]
                     if task.interface else items[0])
        selected ::
            i_include = view.find('interface_include')
            i_include.objects = []

            if change['value']:
                # HINT we explicitely passes the task to avoid the interface_id
                # to be ill defined for a time. Which can crash the selector
                # widget.
                task.interface = interfaces[change['value']].cls(task=task)

                i_include.objects = root.view_for(task.interface)

    Label: t_lab:
        text = 'Timing'
    CheckBox: t_val:
        checked := task.timing

    Include: interface:
        name = 'interface_include'

    Include: embedded_task:
        objects << make_view(root, task) if task.task else []
