# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Base view for task needing to access an instrument.

"""
from enaml.widgets.api import Label, Field, ToolButton, Container
from enaml.layout.api import hbox

from .base_views import BaseTaskView


enamldef InstrTaskView(BaseTaskView):
    """Base view for task needing to connect to an instrument.

    This provides the facilities to select the appropriate instrument profile.

    """
    #: Reference to the label of the instrument selection.
    alias instr_label : i_lab

    #: Reference to the field indicating the selected instrument.
    alias instr_selection : i_val_sel

    func filter_profiles(profiles):
        """Function passed to the exopy.instrument.select_profile command
        to limit the displayed profiles.

        Parameters
        ----------
        profiles : dict
            Profiles to filter (id: infos)

        Returns
        -------
        filtered : list
            Ids of the allowed drivers.

        """
        w = self.root.core.workbench
        plugin = w.get_plugin('exopy.tasks')
        t_infos = plugin.get_task_infos(task.task_id)

        drivers = set(t_infos.instruments)
        for i_id, i in t_infos.walk_interfaces():
            drivers |= i.instruments

        return [p for p, v in profiles.items()
                if any([d.id in drivers
                        for d in v.model.drivers])]

    func filter_drivers(drivers):
        """Filter the drivers that one can choose after selecting the profile.

        Parameters
        ----------
        drivers : list
            List of driver infos to filter.

        Returns
        -------
        filtered : list
            Filtered list of infos objects.

        """
        w = self.root.core.workbench
        plugin = w.get_plugin('exopy.tasks')
        t_infos = plugin.get_task_infos(task.task_id)
        ds = set(t_infos.instruments)
        for i_id, i in t_infos.walk_interfaces():
            ds |= i.instruments
        return [d for d in drivers if d.id in ds]

    func make_selected_instrument_tooltip(selected):
        """Build the tooltip summarizing the infos about the selected
        instrument.

        """
        t = ('Selected profile : {}\nSelected driver : {}\n'
             'Selected connection : {}')
        if selected[3]:
            t += '\nSelected settings : {}'
        else:
            selected = selected[:3]
        return t.format(*selected)

    func select_interface():
        """Select the interface matching the currently selected driver.

        """
        if task.selected_instrument and len(task.selected_instrument) == 4:
            _, d, _, _ = task.selected_instrument
            w = self.root.core.workbench
            plugin = w.get_plugin('exopy.tasks')
            t_infos = plugin.get_task_infos(task.task_id)
            if d in t_infos.instruments:
                task.interface = None
            else:
                for i_id, i in t_infos.walk_interfaces():
                    if d in i.instruments:
                        interface = i.cls()
                        while i.parent is not t_infos:
                            interface = i.cls(interface=i)
                        task.interface = interface
        else:
            task.interface = None

    Label: i_lab:
        text = 'Instrument'

    Container: i_val_sel:

        padding = 0
        constraints = [hbox(i_val, i_sel)]
        hug_width = 'weak'

        Field: i_val:
            attr selected << task.selected_instrument
            text << selected[0] if selected else ''
            tool_tip << make_selected_instrument_tooltip(selected)
            read_only = True
        ToolButton: i_sel:
            # TODO move to a search icon
            button_style = 'text_only'
            text = 'Select'
            hug_width = 'strong'
            clicked ::
                cmd = 'exopy.instruments.select_instrument'
                p, d, c, s = task.selected_instrument
                parameters = {'profile': p, 'driver': d, 'connection': c,
                              'settings': s,
                              'filter_profiles': filter_profiles,
                              'filter_drivers': filter_drivers}
                selected = root.core.invoke_command(cmd, parameters)
                if selected is not None:
                    task.selected_instrument = selected
