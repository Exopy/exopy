# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Definition of the base views for the tasks.

If need be one can inherit from an enamldef class to build a new class using
class.

"""
from operator import attrgetter

from atom.api import Event
from enaml.widgets.api import (GroupBox, Stack, StackItem, FileDialogEx,
                               Label, Field, ToolButton, CheckBox)
from enaml.core.api import d_, d_func
from enaml.layout.api import hbox, vbox, align

from ...app.icons.api import get_icon
from ...utils.enaml_destroy_hook import add_destroy_hook
from .task_editor import TaskEditor, FoldableTaskEditor
from .base_tasks import BaseTask


DestroyableGroupBox = add_destroy_hook(GroupBox)


enamldef BaseTaskView(DestroyableGroupBox):
    """Base class for all task views.

    """
    #: Reference to the task edited using this view.
    attr task

    #: Reference to the root view of the hierarchy.
    attr root

    func refresh():
        """Ensure that the view will be displayed properly.

        This methods should be called after reparenting a view.

        """
        self.show()

    title << task.name + ' (' + task.task_id + ')'
    padding = (0,5,5,5)

enamldef ComplexTaskView(BaseTaskView): main:
    """View for complex tasks.

    """
    #: Reference to the editor.
    alias editor

    refresh => ():
        """Ensure that all children tasks are also properly displayed.

        """
        BaseTaskView.refresh(self)
        editor.refresh()

    FoldableTaskEditor: editor:
        task = main.task
        root = main.root


enamldef RootTaskView(BaseTaskView): main:
    """Special view for the root task.

    This view must always exists as it is responsible for managing the views
    for the whole hierarchy.

    """
    #: Reference to the core plugin of the application.
    attr core

    root = main

    refresh => ():
        """Ensure that all children tasks are also properly displayed.

        """
        BaseTaskView.refresh(self)
        editor.refresh()

    func create_new_task(future_parent):
        """Create a new task to insert into the hierarchy.

        Parameters
        ----------
        future_parent:
            Future parent of the task

        """
        return core.invoke_command('exopy.tasks.create_task', dict(parent_ui=self, future_parent=future_parent))

    func get_interfaces_for(obj):
        """Get the available interfaces for a given object.

        Parameters
        ----------
        obj :
            Object for which to retrieve the available interfaces.

        Returns
        -------
        interfaces : dict
            Interfaces infos by interface ids.

        """
        if isinstance(obj, BaseTask):
            cmd = 'exopy.tasks.get_task_infos'
            infos = core.invoke_command(cmd, {'task': obj.task_id})

        else:
            cmd = 'exopy.tasks.get_interface_infos'
            infos = core.invoke_command(cmd,
                                        {'interface': obj.interface_id})

        return infos.interfaces

    func view_for(obj):
        """Create a widget for the specified task.

        The view is initialized but given no parent.

        """
        if isinstance(obj, BaseTask):
            task = obj
            if task not in _cache:
                cmd = 'exopy.tasks.get_task'
                _, view_cls = core.invoke_command(cmd,
                                                  {'task': task.task_id,
                                                   'view': True})
                _cache[task] = view_cls(task=task, root=self)

            return _cache[task]

        else:
            cmd = 'exopy.tasks.get_interface'
            i_id = obj.interface_id
            _, views_cls = core.invoke_command(cmd,
                                              {'interface': i_id,
                                               'views': True})
            return [v(interface=obj, root=self) for v in views_cls]

    func discard_view(task):
        """Take care of destroying the view associated with a given task.

        """
        try:
            view = _cache.pop(task)
            # Make sure all children are parented and will hence be properly
            # destroyed.
            view.refresh()
            view.set_parent(None)
            view.destroy()
        except KeyError:
            pass
        else:
            # Remove all views that have been destroyed because their
            # parent was just destroyed
            self._cache = {k: v for k, v in _cache.items()
                           if not v.is_destroyed}

    ended ::
        # When this view is destroyed it must destroy all the view in the cache
        # Do it by depth order to always destroy the parent first, should allow
        # to speed up a bit the process.
        tasks = sorted(_cache, key=attrgetter('depth'))
        for t in tasks:
            view = _cache.pop(t)
            if not view.is_destroyed:
                view.destroy()
            # Manually breaking the reference cycles reduce the gc work
            view.task = None
            view.root = None
        self.root = None

    constraints = [vbox(hbox(p_lab, p_val, p_exp, prof), editor),
                   align('v_center', p_lab, p_val)]

    Label: p_lab:
        text = 'Root path'
    Field: p_val:
        text := task.default_path
    ToolButton: p_exp:
        icon = get_icon(core.workbench, 'folder-open')
        clicked ::
            curr_path = task.default_path
            get_dir = FileDialogEx.get_existing_directory
            path = get_dir(title='Select a default path',
                           current_path=curr_path)

            if path:
                task.default_path = path
    CheckBox: prof:
        text = 'Profile'
        checked := task.should_profile
        tool_tip = 'Profile the execution of the task and dump the result.'

    TaskEditor: editor:
        task = main.task
        root = main

    # =========================================================================
    # --- Private API ---------------------------------------------------------
    # =========================================================================

    #: Dictionary used to store the view associated with each task.
    attr _cache : dict = {task: self}
