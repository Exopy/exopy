# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Measurement plugin manifest.

"""
import logging
from collections import Mapping
from pprint import pformat

import enaml
from enaml.stdlib.message_box import warning
from enaml.workbench.api import PluginManifest, ExtensionPoint, Extension
from enaml.workbench.ui.api import ActionItem

from ..app.api import AppClosing
from ..app.preferences.api import Preferences
from ..app.errors.api import ErrorHandler
from ..app.errors.widgets import HierarchicalErrorsDisplay
from ..instruments.api import InstrUser

from .engines.process_engine import ProcessEngine
from .editors.api import Editor
from .hooks.api import PreExecutionHook, PostExecutionHook

logger = logging.getLogger(__name__)

# =============================================================================
# --- Factories ---------------------------------------------------------------
# =============================================================================

def measurement_plugin_factory():
    """Factory function for the plugin.

    Delayed import allow faster start-up.

    """
    from .plugin import MeasurementPlugin
    return MeasurementPlugin()

def workspace_factory(workbench):
    """Factory function for the workspace.

    Delayed import allow faster start-up.

    """
    from .workspace.workspace import MeasurementSpace
    return MeasurementSpace()

# =============================================================================
# --- Closing handler ---------------------------------------------------------
# =============================================================================

def validate_closing(window, event):
    """Check that no measurement is currently running before app closing.

    """
    workbench = window.workbench
    plugin = workbench.get_plugin('exopy.measurement', force_create=False)
    if plugin and plugin.processor.active:
        event.ignore()
        msg = ('A measurement is currently running please stop it before '
               'exiting.')
        warning(window, 'Measurement running', msg)

# =============================================================================
# --- Descriptions ------------------------------------------------------------
# =============================================================================

ENGINE_DESCRIPTION =\
"""Users can contribute Engine to this point to add a new way to execute a
bunch of tasks.

"""


EDITOR_DESCRIPTION =\
"""Users can contribute Editor to this point to add new editing capabilities
for tasks. Editors use can be restricted to a small subset of tasks.

"""


PRE_EXECUTION_DESCRIPTION =\
"""Users can contribute PreExecutionHook to this point to add new ways of
customizing the process of execution of a measurement. Such hook are executed
before running the measurement. They can inject new values in the database of the
measurement, run advance tests, ...

"""


MONITORS_DESCRIPTION =\
"""Users can contribute Monitor to this point to add new ways of
monitoring the execution of a measurement.

"""


POST_EXECUTION_DESCRIPTION =\
"""Users can contribute PostExecutionHook to this point to add new ways of
customizing the process of execution of a measurement. Such hook are executed
after running the measurement. They can clean after the measurement no matter
how it ended, ...

"""

MEASURE_LOADING_ERROR_DESCRIPTION =\
"""Report errors which occured while trying to load a measurement in a hierarchical
fashion. Expected infos are 'message' used only for logging, and 'details'
which should be a dict containing the errors.

"""


# =============================================================================
# --- Manifest ----------------------------------------------------------------
# =============================================================================
enamldef MeasureManifest(PluginManifest): manifest:
    """Manifest of the MeasurementPlugin.

    The measurement plugin handles measurement edition and execution.

    """
    id = 'exopy.measurement'
    factory = measurement_plugin_factory

    # =========================================================================
    # --- Extension points ----------------------------------------------------
    # =========================================================================

    ExtensionPoint:
        id = 'engines'
        description = ENGINE_DESCRIPTION

    ExtensionPoint:
        id = 'editors'
        description = EDITOR_DESCRIPTION

    ExtensionPoint:
        id = 'pre-execution'
        description = PRE_EXECUTION_DESCRIPTION

    ExtensionPoint:
        id = 'monitors'
        description = MONITORS_DESCRIPTION

    ExtensionPoint:
        id = 'post-execution'
        description = POST_EXECUTION_DESCRIPTION

    # =========================================================================
    # --- Extensions ----------------------------------------------------------
    # =========================================================================

    Extension:
        id = 'editors'
        point = manifest.id + '.editors'
        Editor:
            id = 'exopy.standard'
            description = 'Editor relying on the task views.'
            rank = 0
            new => (workbench, default=False):
                with enaml.imports():
                    from .editors.standard_editor import StandardEditor
                return StandardEditor(declaration=self,
                                      workbench=workbench,
                                      name=self.id)

            is_meant_for => (workbench, selected_task):
                return True

        Editor:
            id = 'exopy.database_access'
            description = ('Editor allowing to modify database access '
                           'permissions.')
            new => (workbench, default=False):
                from .editors.database_access_editor\
                    import DatabaseAccessEditor
                return DatabaseAccessEditor(declaration=self, name=self.id)

            is_meant_for => (workbench, selected_task):
                from ..tasks.api import ComplexTask
                return isinstance(selected_task, ComplexTask)

        Editor:
            id = 'exopy.execution'
            description = ('Editor allowing to customize execution options: '
                           'stopping, execution in parallel, or waiting on'
                           'other tasks.')
            new => (workbench, default=False):
                from .editors.execution_editor import ExecutionEditor
                return ExecutionEditor(declaration=self, name=self.id)

            is_meant_for => (workbench, selected_task):
                return True

    Extension:
        id = 'engines'
        point = manifest.id + '.engines'
        ProcessEngine:
            pass

    Extension:
        id = 'pre-execution'
        point = manifest.id + '.pre-execution'
        PreExecutionHook:
            id = 'exopy.internal_checks'
            description = 'Run the internal checks of the main task.'
            new => (workbench, default=False):
                from .hooks.internal_checks import InternalChecksHook
                return InternalChecksHook(declaration=self)

    Extension:
        id = 'post-execution'
        point = manifest.id + '.post-execution'
        PostExecutionHook:
            id = 'exopy.addtask_hook'
            description = ('Run an additional task at the end of a measure,'
                           'even if it is stopped.')

            # appelÃ© dans plugin, l 266
            new => (workbench, default=False):
                from .hooks.addtask_hook import AddTasksHook
                return AddTasksHook(declaration=self)

            make_view => (workbench, hook):
                with enaml.imports():
                    from .hooks.addtask_view import AddTasksView
                return AddTasksView(declaration=self, hook=hook,
                                    workbench=workbench)

    Extension:
        id = 'preferences'
        point = 'exopy.app.preferences.plugin'
        Preferences:
            auto_save = ['path', 'selected_engine']

    Extension:
        id = 'users'
        point = 'exopy.instruments.users'
        InstrUser:
            id = 'exopy.measurement'
            policy = 'unreleasable'

    Extension:
        id = 'err_handlers'
        point = 'exopy.app.errors.handler'
        ErrorHandler:
            id = 'measurement-loading'
            description = MEASURE_LOADING_ERROR_DESCRIPTION
            handle => (workbench, infos):
                if not isinstance(infos, Mapping):
                    mapping = {'meas_%d' % i: m.get('details', m)
                               for i, m in enumerate(infos)}
                else:
                    mapping = infos.get('details', infos)


                logger.debug(_format(infos))
                return HierarchicalErrorsDisplay(errors=mapping)

            func _format(infos):
                def_msg =  'No message found, infos are {}'
                return (infos.get('message', def_msg.format(pformat(infos))) +
                        pformat(infos.get('details', infos)))

    Extension:
        id = 'app_closing'
        point = 'exopy.app.closing'
        AppClosing:
            id = 'exopy.measurement.running'
            validate => (window, event):
                return validate_closing(window, event)

    Extension:
        id = 'workspace'
        point = 'enaml.workbench.ui.workspaces'
        factory = workspace_factory

    Extension:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/workspace/measurement'
            label = 'Measurement'
            shortcut = 'Ctrl+1'
            group = 'spaces'
            command = 'enaml.workbench.ui.select_workspace'
            parameters = {'workspace': 'exopy.measurement.workspace'}
