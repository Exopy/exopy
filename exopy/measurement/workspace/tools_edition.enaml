# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Widgets dedicated to edit the tools attached to a measurement.

"""
from enaml.widgets.api import (DockItem, Notebook, Page, Dialog, PushButton,
                               Container, MultilineField, Label)
from enaml.layout.api import hbox, vbox, spacer
from enaml.core.api import Declarative, Include

from ...utils.traceback import format_exc
from ...utils.enaml_destroy_hook import add_destroy_hook
from ...utils.widgets.qt_list_str_widget import QtListStrWidget
from ...utils.transformers import ids_to_unique_names


enamldef ToolSelector(Dialog): dial:
    """ Simple dialog to select a tool.

    """
    #: Kind of tool to select ({'pre-hook', 'monitor', 'post-hook'})
    attr kind

    #: Measurement for which a new tool is being chosen.
    attr measurement

    #: Declaration for the currently selected tool.
    attr selected_decl << (find_decl(list_ed.selected_item)
                           if list_ed.selected_item else None)

    #: Private version of kind, reflecting the real name of the members
    attr _kind = kind.replace('-', '_')+'s'

    #: Private mapping between tools ids and names.
    attr _names = ids_to_unique_names(set(getattr(measurement.plugin, _kind)) -
                                      set(getattr(measurement, _kind)))

    title = 'Select a %s' % kind

    initialized ::
        if list_ed.selected_item:
            dial.selected_decl = find_decl(list_ed.selected_item)

    func find_decl(name):
        pl = measurement.plugin
        id_ = _names[name]
        return pl.get_declarations(kind, [id_])[id_]

    Container:
        constraints << [vbox(hbox(list_ed, desc), hbox(spacer, cancel, ok))]

        QtListStrWidget: list_ed:
            items << sorted(_names)

        MultilineField: desc:
            text << selected_decl.description if selected_decl else ''

        PushButton: ok:
            text = 'Ok'
            enabled << bool(dial.selected_decl)
            clicked ::
                dial.accept()

        PushButton: cancel:
            text = 'Cancel'
            clicked ::
                dial.reject()


enamldef NonEditableTool(Container):
    """Widget used when the make_view method of the tool declaration return
    None

    """
    #: Reference to the tool to which this view is linked.
    attr tool

    #: Message to display to explain why this widget is used.
    alias msg : lb.text
    msg = 'Tool %s is not editable' % tool.declaration.id

    Label: lb:
        pass

    MultilineField:
        read_only = True
        text = tool.declaration.description


DestroyableContainer = add_destroy_hook(Container)


enamldef ToolsEditor(DestroyableContainer): main:
    """Widget used to edit the tools parameters of a measurement.

    """
    #: Kind of tool to edit ({'pre-hook', 'monitor', 'post-hook'})
    attr kind

    #: Measurement whose tools are being edited.
    attr measurement

    #: Currently selected tool (id)
    alias selected_id : tools.selected_item

    #: Ids of tools that cannot be removed.
    attr mandatory_tools = []

    #: Cache of the already created views.
    attr _cache = {}

    #: Private version of kind, reflecting the real name of the members
    attr _kind = kind.replace('-', '_')+'s'

    #: Private mapping between tools ids and names.
    attr _names = ids_to_unique_names(getattr(measurement, _kind), reverse=True)

    constraints << [hbox(tools, *(list(inc.objects) +
                                       [vbox(add, remove, up, down, spacer)])),
                    add.right == contents_right,
                    tools.bottom == contents_bottom,
                    tools.top == contents_top]

    func update_items():
        """Update the list of tools.

        """
        self._names = ids_to_unique_names(getattr(measurement, _kind),
                                          reverse=True)
        tools.items = list(_names)

        if not _names:
            tools.selected_item = None

    func make_view(selected):
        """Create (or retrieve from the cache) a view for the selected tool.

        """
        if selected in _cache:
            return [_cache[selected]]

        tool = getattr(measurement, _kind)[selected]
        decl = tool.declaration
        try:
            view = decl.make_view(measurement.plugin.workbench, tool)
        except Exception:
            w = measurement.plugin.workbench
            core = w.get_plugin('enaml.workbench.core')
            cmd = 'exopy.app.errors.signal'
            msg = 'Failed to create widget for %s %s :\n%s'
            err = format_exc()
            tool_id = _names[selected]
            core.invoke_command(cmd,
                                dict(kind='error',
                                     message=msg % (kind, tool_id, err))
                                )
            view = NonEditableTool(tool=tool,
                                   msg='Tool failed to generate a widget')
        if not view:
            view = NonEditableTool(tool=tool)
        _cache[selected] = view
        return [view]

    func _to_name(tool_id):
        return _names[tool_id]

    activated ::
        update_items()

    ended ::
        for w in _cache.values():
            w.set_parent(None)
            w.destroy()

    QtListStrWidget: tools:
        sort = False
        to_string = _to_name

    Include: inc:
        objects << (make_view(tools.selected_item) if tools.selected_item
                    else [Container()])
        destroy_old = False

    PushButton: add:
        text = 'Add'
        enabled << not all([id in tools.items
                            for id in getattr(measurement.plugin, _kind)])
        clicked ::
            selector = ToolSelector(measurement=measurement, kind=kind)
            res = selector.exec_()
            if res:
                workbench = measurement.plugin.workbench
                tool_id = selector.selected_decl.id
                try:
                    measurement.add_tool(kind, tool_id)
                    update_items()
                except Exception:
                    w = measurement.plugin.workbench
                    core = w.get_plugin('enaml.workbench.core')
                    cmd = 'exopy.app.errors.signal'
                    msg = 'Failed to create/add %s %s :\n%s'
                    err = format_exc()
                    core.invoke_command(cmd,
                                        dict(kind='error',
                                             message=msg % (kind, tool_id, err)
                                             )
                                        )

    PushButton: remove:
        text = 'Remove'
        enabled << bool(selected_id) and selected_id not in mandatory_tools
        clicked ::
            id_ = selected_id
            try:
                measurement.remove_tool(kind, id_)
                update_items()
            except KeyError:
                pass

            if id_ in _cache:
                view = _cache[id_]
                view.set_parent(None)
                view.destroy()
                del _cache[id_]

    PushButton: up:
        text = 'Move up'
        enabled << (bool(tools.items) and bool(selected_id) and
                    selected_id != tools.items[0])
        clicked ::
            ind = tools.items.index(selected_id)
            measurement.move_tool(kind, ind, ind-1)
            update_items()

    PushButton: down:
        text = 'Move down'
        enabled << (bool(tools.items) and bool(selected_id) and
                    selected_id != tools.items[-1])
        clicked ::
            ind = tools.items.index(selected_id)
            measurement.move_tool(kind, ind, ind+1)
            update_items()


enamldef ToolsEditorDockItem(DockItem): main:
    """DockItem for editing the tools attached to a measurement.

    """
    # Measurement whose tools are being edited.
    attr measurement

    title << measurement.name + ' ' + measurement.id + ' tools'
    name = 'exopy.measurement.workspace.tools.monitors'

    Container:
        Notebook:
            tabs_closable = False
            tabs_movable = False

            Page:
                title = 'Pre-execution'
                name = 'exopy.measurement.workspace.tools.pre_hooks'
                ToolsEditor: pre_ed:
                    kind = 'pre-hook'
                    measurement << main.measurement
                    mandatory_tools = ['exopy.internal_checks']

            Page:
                title = 'Monitors'
                name = 'exopy.measurement.workspace.tools.monitors'
                ToolsEditor: mon_ed:
                    kind = 'monitor'
                    measurement << main.measurement

            Page:
                title = 'Post-execution'
                name = 'exopy.measurement.workspace.tools.post_hooks'
                ToolsEditor: post_ed:
                    kind = 'post-hook'
                    measurement << main.measurement

