# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by Exopy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Widget related to measurement edition tasks.

"""
import logging
from operator import attrgetter
from textwrap import fill
from inspect import cleandoc

from atom.api import Atom, ForwardTyped, Typed, Bool, Dict, List
from enaml.core.api import Include
from enaml.layout.api import hbox, vbox, align, spacer, InsertTab, TabLayout
from enaml.widgets.api import (PushButton, Menu, Action, Container, Dialog,
                               Label, Field, Notebook, DockItem, DockArea)
from enaml.stdlib.message_box import question

from ...utils.traceback import format_exc
from ...utils.widgets.qt_clipboard import CLIPBOARD
from ...utils.widgets.qt_tree_widget import QtTreeWidget
from ...utils.widgets.tree_nodes import TreeNode
from ...utils.widgets.qt_tree_menu import \
    (CutAction, NewAction, RenameAction, DeleteAction)
from ...tasks.api import (BaseTask, SimpleTask, ComplexTask)
from ...tasks.utils.building import build_task_from_config
from ..editors.base_editor import BaseEditor
from .tools_edition import ToolsEditorDockItem


logger = logging.getLogger(__name__)


enamldef SaveAction(Action):
    """Action used to save task as a template.

    """
    #: Context holding the informations about on which task this action was
    #: invoked. See exopy.utils.widgets.tree_node for a more complete
    #: description.
    attr action_context

    #: Reference to the measurement workspace.
    attr workspace

    text = 'Save template'

    triggered ::
        _, _, obj, _ = action_context['data']
        core = workspace.workbench.get_plugin('enaml.workbench.core')
        ui = workspace.workbench.get_plugin('enaml.workbench.ui')
        cmd = 'exopy.tasks.save'
        try:
            core.invoke_command(cmd, dict(task=obj, mode='template',
                                          widget=ui.window))
        except Exception:
            core = workspace.workbench.get_plugin('enaml.workbench.core')
            cmd = 'exopy.app.errors.signal'
            msg = 'Failed to save task %s:\n%s'
            core.invoke_command(cmd, dict(kind='error',
                                          message=msg % (obj.name,
                                                         format_exc())))

enamldef TaskCopyAction(Action):
    """ Copies the current task object to the paste buffer.

    """
    #: Context holding the informations about on which task this action was
    #: invoked. See exopy.utils.widgets.tree_node for a more complete
    #: description.
    attr action_context

    #: Reference to the measurement workspace.
    attr workspace

    text = 'Copy'
    visible << action_context['copyable']
    triggered::
        task = action_context['data'][2]
        core = workspace.workbench.get_plugin('enaml.workbench.core')
        task.update_preferences_from_members()
        config = task.preferences
        # workspace is present in parent scope so we can access it
        copy = build_task_from_config(config, workspace.workbench)
        CLIPBOARD.instance = copy


enamldef TaskPasteAction(Action):
    """ Pastes the task currently in the paste buffer into the current node.

    """
    #: Context holding the informations about on which task this action was
    #: invoked. See exopy.utils.widgets.tree_node for a more complete
    #: description.
    attr action_context

    text = 'Paste'
    visible << action_context['pasteable']
    triggered::
        widget, node, obj, nid = action_context['data']
        new_data = CLIPBOARD.instance
        used_names = obj.root.get_used_names()
        for i in new_data.traverse():
            if hasattr(i, 'name') and i.name in used_names:
                i.name = "(copy)" + i.name
        widget._append(node, obj, new_data, False)


def build_task(workbench, future_parent):
    """Call the Command responsible for building a task.

    """
    core = workbench.get_plugin('enaml.workbench.core')
    ui = workbench.get_plugin('enaml.workbench.ui')
    return core.invoke_command('exopy.tasks.create_task',
                               {'parent_ui': ui.window,
                                'future_parent': future_parent})


enamldef SimpleMenu(Menu): menu:
    """Menu for tasks inheriting from SimpleTask (ie task with no children).

    """
    #: Context in which this menu was invoked.
    attr context

    #: Reference to the application workbench.
    attr workspace

    NewAction:
        action_context << context
        factory = build_task
        mode = 'Add before'
        kwargs = {'workbench': workspace.workbench, 'future_parent': context['data'][2]}
    NewAction:
        action_context << context
        factory = build_task
        mode = 'Add after'
        kwargs = {'workbench': workspace.workbench, 'future_parent': context['data'][2]}

    Action:
        separator = True

    CutAction:
        action_context << context
    TaskCopyAction:
        workspace = menu.workspace
        action_context << context
    TaskPasteAction:
        action_context << context

    Action:
        separator = True

    DeleteAction:
        action_context << context

    Action:
        separator = True

    RenameAction:
        action_context << context


enamldef ComplexMenu(Menu): menu:
    """Menu for tasks inheriting from ComplexTask (ie task with children).

    """
    #: Context in which this menu was invoked.
    attr context

    #: Reference to the active measurement workspace.
    attr workspace

    NewAction:
        action_context << context
        factory = build_task
        kwargs = {'workbench': workspace.workbench, 'future_parent': context['data'][2]}
    NewAction:
        action_context << context
        factory = build_task
        mode = 'Add before'
        kwargs = {'workbench': workspace.workbench, 'future_parent': context['data'][2]}
    NewAction:
        action_context << context
        factory = build_task
        mode = 'Add after'
        kwargs = {'workbench': workspace.workbench, 'future_parent': context['data'][2]}

    Action:
        separator = True

    SaveAction:
        action_context << context
        workspace = menu.workspace

    Action:
        separator = True

    CutAction:
        action_context << context
    TaskCopyAction:
        workspace = menu.workspace
        action_context << context
    TaskPasteAction:
        action_context << context

    Action:
        separator = True

    DeleteAction:
        action_context << context

    Action:
        separator = True

    RenameAction:
        action_context << context


enamldef TaskTreeNode(TreeNode):
    """Common settings for tree nodes for tasks.

    """
    label = 'name'
    get_label => (obj):
        return obj.name + '(' + obj.task_id + ')'
    enter_rename => (obj):
        return obj.name
    exit_rename => (obj, label):
        forbidden_names = obj.root.get_used_names()
        if label not in forbidden_names:
            obj.name = label


class _MeasEditionModel(Atom):
    """Model for the MeasureEditorView.

    This model ensures that only the editors fitting the currently selected
    task are displayed, that the selected editor get the selected task and that
    the editor preferences are applied to the tree.

    """
    #: Reference to the view this object control
    view = ForwardTyped(lambda: MeasEditionView)

    #: List of all editors which can be used given the selected_task
    valid_editors = List()

    #: Currently selected editor.
    selected_editor = Typed(BaseEditor)

    #: Should the tree be enabled given the currenlty selected editor.
    tree_enabled = Bool(True)

    #: Should the tree be visible given the currently selected editor.
    tree_visible = Bool(True)

    def __init__(self, **kwargs):
        super(_MeasEditionModel, self).__init__(**kwargs)

    def activate(self):
        """Start observing once the system is properly set up.

        """
        self.view.observe('selected_task', self.update_after_task_selection)

    def clear_state(self, ):
        """ Destroy all previously used editors.

        """
        self.selected_editor = None
        self.valid_editors = []

    def update_after_task_selection(self, change):
        """Keep the list of valid editors up to date and update editor.

        """
        new_task = change['value']
        plugin = self.view.workspace.plugin
        editors = plugin.get_declarations('editor', plugin.editors)

        # Find all valid editors.
        valid_decls = {id: editor for id, editor in editors.items()
                       if editor.is_meant_for(plugin.workbench, new_task)}
        valid_ids = set(valid_decls)

        # Get the current editor by id.
        current_editors = {editor.declaration.id: editor
                           for editor in self.valid_editors}
        current_ids = set(current_editors)

        if valid_ids != current_ids:

            to_add = valid_ids - current_ids
            order = sorted(valid_decls.values(), key=attrgetter('rank', 'id'))

            valid_editors = []
            for decl in order:
                if decl.id in to_add:
                    try:
                        editor = decl.new(plugin.workbench)
                        valid_editors.append(editor)
                    except Exception:
                        logger.exception('Failed to create %s', decl.id)
                else:
                    valid_editors.append(current_editors[decl.id])

            if self.selected_editor not in valid_editors:
                self.valid_editors = valid_editors
                self.view.editors.selected_tab =\
                    valid_editors[0].declaration.id

            else:
                self.valid_editors = valid_editors

        # Update selected editor with new selected task. If the editor changed
        # this is a no-op.
        if self.selected_editor:
            self.selected_editor.selected_task = new_task

    #--- Private API ----------------------------------------------------------

    def _post_setattr_selected_editor(self, old, new):
        """ Update infos for newly selected editor.

        """
        if old:
            old.react_to_unselection(self.view.workspace.workbench)

        if new:
            editor = new
            # Update selected task.
            editor.selected_task = self.view.selected_task

            # Get tree preferences.
            self.tree_enabled = editor.tree_enabled
            self.tree_visible = editor.tree_visible

            editor.react_to_selection(self.view.workspace.workbench)


enamldef MeasEditionView(Container): ed:
    """Main view for measurement edition.

    """
    #: Reference to the active workspace.
    attr workspace

    #: Reference to the measurement being edited.
    attr measurement
    measurement :: post_set_measurement()

    #: Currently selected task.
    attr selected_task

    #: Reference to the dock item this editor is embedded into.
    attr dock_item

    #: Reference to the notebook to allow setting the selected tab.
    alias editors : nb

    #: Controller responsible for the editors handling.
    attr _internal = _MeasEditionModel(view=self)

    func post_set_measurement():
        if measurement:
            _internal.clear_state()
            ed.selected_task = measurement.root_task
            tree.root_node = measurement.root_task
            tree.selected_item = measurement.root_task

    constraints << [vbox(hbox(lab, name, id_lab, id_val, edition),
                         hbox(tree, nb),
                         ),
                    align('v_center', lab, name)]

    activated ::
        del ed.selected_task
        _internal.activate()
        post_set_measurement()

    Label: lab:
        text = 'Name'

    Field: name:
        hug_width = 'ignore'
        text := measurement.name

    Label: id_lab:
        text = 'Id'

    Field: id_val:
        text := measurement.id

    PushButton: edition:
        text = 'Edit tools'
        tool_tip = ('Edit the pre-execution hooks, monitors, post-execution '
                    'hooks linked to the measurement.')
        clicked ::
            name = dock_item.name + '_tools'
            dock_area = dock_item.parent
            if not any([item.name == name for item in dock_area.dock_items()]):
                # The editor does not exists so create it.
                ToolsEditorDockItem(dock_area, name=name, measurement=measurement)

            # Now insert the item in a tab with the measurement editor.
            dock_area.update_layout(InsertTab(item=name,
                                              target=dock_item.name))

    QtTreeWidget: tree:

        hug_height = 'ignore'
        root_node = measurement.root_task
        selected_item >> ed.selected_task
        visible << _internal.tree_visible
        enabled << _internal.tree_enabled
        auto_expand = True

        TaskTreeNode:
            node_for = [ComplexTask]
            children_member = 'children'
            children_changed = 'children_changed'
            add = [BaseTask]
            move = [BaseTask]
            auto_open = True
            insert_child => (obj, index, child):
                obj.add_child_task(index, child)
            delete_child => (obj, index):
                obj.remove_child_task(index)
            move_child => (obj, old, new):
                obj.move_child_task(old, new)
            ComplexMenu:
                workspace = ed.workspace

        TaskTreeNode:
            node_for = [SimpleTask]
            SimpleMenu:
                workspace = ed.workspace

    Notebook: nb:
        # Update the selected editor when the user click a tab or when the
        # previously selected editor is removed.
        tabs_closable = False
        hug_width = 'ignore'
        selected_tab ::
            if selected_tab:  # HINT not sure why this is necessary !
                ed = nb.find(selected_tab)
                _internal.selected_editor = ed
        Include:
            objects << _internal.valid_editors


class _MeasDockItem(DockItem):
    """Overrides close to show confirmation dialog.

    """
    def _item_closed(self):
        """Ask the user to confirm closing and close tools edition panel if
        opened.

        """
        btn = question(self, 'Confirm closing',
                       'Are you sure you want to close this measurement ?')
        if btn and btn.action == 'accept':
            tool_dock = self.parent.find(self.name + '_tools')
            if tool_dock:
                tool_dock.destroy()
            super(_MeasDockItem, self)._item_closed()
        else:
            self.show()


enamldef MeasurementEditorDockItem(_MeasDockItem): main:
    """ DockItem used for editing a measurement, main component of the workspace
    content.

    """
    #: Reference to the workspace.
    alias workspace : editor.workspace

    #: Reference to the edited measurement.
    alias measurement : editor.measurement

    closed ::
        workspace.plugin.edited_measurements.remove(measurement)

    stretch = 20

    title << measurement.name + ' ' + measurement.id

    Container:
        constraints = [vbox(editor,
                            hbox(save, load, spacer, enqueue_button))]

        MeasEditionView: editor:
            dock_item = main

        PushButton: save:
            text = 'Save'
            hug_width  = 'strong'
            hug_height = 'strong'
            Menu:
                Action:
                    text = 'Save'
                    triggered ::
                        workspace.save_measurement(measurement)
                Action:
                    text = 'Save as'
                    triggered ::
                        workspace.save_measurement(measurement, False)

        PushButton: load:
            text = 'Load'
            hug_width  = 'strong'
            hug_height = 'strong'
            Menu:
                Action:
                    text = 'Load measurement'
                    triggered ::
                        workspace.load_measurement(mode='file', dock_item=main)
                Action:
                    text = 'Load template'
                    enabled = False
                    tool_tip = fill(cleandoc('''Load a template task as a
                                    measurement using the default parameters
                                    concerning the  tools.'''), 50)
                    triggered ::
                        workspace.load_measurement(mode='template', dock_item=main)

        PushButton: enqueue_button:
            text = 'Enqueue'
            hug_width  = 'strong'
            hug_height = 'strong'
            clicked::
                workspace.enqueue_measurement(measurement)


enamldef MeasureEditorDialog(Dialog): main:
    """ Dialog allowing to re-edit a measurement once it is in the queue.

    """
    #: Reference to the active workspace.
    alias workspace : ed.workspace

    #: Reference to the edited measurement.
    alias measurement : ed.measurement

    title = 'Edit measurement {}'.format(measurement.name)

    closed::
        measurement.dependencies.reset()

    Container:
        constraints = [vbox(area, hbox(spacer, checks, save))]

        DockArea: area:
            style = 'metro'
            layout = TabLayout('measurement')
            DockItem: item:

                name = 'measurement'
                closable = False

                MeasEditionView: ed:
                    dock_item = item

        # TODO implement (should re-use at best the work did in enqueue)
        PushButton: checks:
            text = 'Run checks'
            enabled = False
            hug_width  = 'strong'
            hug_height = 'strong'
            clicked ::
                pass

        PushButton: save:
            text = 'Save'
            hug_width  = 'strong'
            hug_height = 'strong'
            clicked ::
                workspace.save_measurement(measurement)
